{"/home/travis/build/npmtest/node-npmtest-renamer/test.js":"/* istanbul instrument in package npmtest_renamer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-renamer/lib.npmtest_renamer.js":"/* istanbul instrument in package npmtest_renamer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_renamer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_renamer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-renamer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-renamer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_renamer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_renamer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_renamer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_renamer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_renamer.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_renamer.__dirname + '/lib.npmtest_renamer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-renamer/node_modules/renamer/lib/renamer.js":"'use strict'\nvar fileSet = require('file-set')\nvar s = require('string-tools')\nvar path = require('path')\nvar fs = require('fs')\nvar Result = require('./Result')\nvar Results = require('./Results')\nvar Usage = require('app-usage-stats')\nvar os = require('os')\n\nvar usage = new Usage('UA-70853320-5', {\n  an: 'renamer',\n  av: require('../package').version,\n  sendInterval: 1000 * 60 * 60 * 24,\n  metricMap: {\n    invocation: 1,\n    find: 2,\n    replace: 3,\n    regex: 4,\n    'dry-run': 5,\n    insensitive: 6,\n    verbose: 7,\n    help: 8\n  }\n})\nusage.defaults\n  .set('cd1', process.version)\n  .set('cd2', os.type())\n  .set('cd3', os.release())\nusage.loadSync()\nprocess.on('exit', function () { usage.saveSync() })\n\n/**\n@module renamer\n*/\nexports.Result = Result\nexports.Results = Results\nexports.replace = replace\nexports.expand = expand\nexports.rename = rename\nexports.dryRun = dryRun\nexports.replaceIndexToken = replaceIndexToken\n\n/**\nPerform the replace. If no `options.find` is supplied, the entire basename is replaced by `options.replace`.\n\n@param {Object} options - Contains the file list and renaming options\n@returns {Array} An array of ResultObject instances containing `before` and `after` info\n*/\nfunction replace (options) {\n  var metrics = { invocation: 1 }\n  for (var option in options) {\n    metrics[option] = 1\n  }\n  usage.hit({ name: 'replace' }, metrics)\n  var findRegex = regExBuilder(options)\n  var results = new Results()\n  results.list = options.files.map(replaceSingle.bind(null, findRegex, options.replace))\n  return results\n}\n\nfunction replaceSingle (findRegex, replace, file) {\n  var result = new Result({ before: path.normalize(file) })\n  var dirname = path.dirname(file)\n  var basename = path.basename(file)\n\n  if (findRegex) {\n    if (basename.search(findRegex) > -1) {\n      basename = basename.replace(findRegex, replace)\n      result.after = path.join(dirname, basename)\n    } else {\n      /* leave result.after blank, signifying no replace was performed */\n    }\n  } else {\n    result.after = path.join(dirname, replace)\n  }\n\n  return result\n}\n\nfunction expand (files) {\n  var fileStats = fileSet(files)\n  fileStats.filesAndDirs = fileStats.files.concat(fileStats.dirs.reverse())\n  return fileStats\n}\n\n/**\nTakes a Results collection in, sets `renamed` and/or `error` on each with the expected values\n@param {Results} results - the Results collection to operate on\n@returns {Results} results\n*/\nfunction dryRun (results) {\n  results.list = results.list.map(function (result, index, resultsSoFar) {\n    var existing = resultsSoFar.filter(function (prevResult, prevIndex) {\n      return prevIndex < index && (prevResult.before !== result.before) && (prevResult.after === result.after)\n    })\n\n    if (result.before === result.after || !result.after) {\n      result.renamed = false\n      result.error = 'no change'\n    } else if (existing.length) {\n      result.renamed = false\n      result.error = 'file exists'\n    } else {\n      result.renamed = true\n    }\n\n    return result\n  })\n  return results\n}\n\n/**\nTakes a Results collection in, performs the rename on disk setting `renamer` and `error` as appropriate\n@param {Results} results - the Results collection to operate on\n@returns {Results} results\n*/\nfunction rename (results) {\n  results.list = results.list.map(function (result) {\n    if (!result.after) {\n      result.renamed = false\n      result.error = 'no change'\n      return result\n    }\n    try {\n      if (fs.existsSync(result.after)) {\n        result.renamed = false\n        result.error = 'file exists'\n      } else {\n        fs.renameSync(result.before, result.after)\n        result.renamed = true\n      }\n    } catch (e) {\n      result.renamed = false\n      result.error = e.message\n    }\n    return result\n  })\n  return results\n}\n\nfunction replaceIndexToken (results) {\n  results.list = results.list.map(function (result, index) {\n    if (result.after) {\n      result.after = result.after.replace('{{index}}', index + 1)\n    }\n    return result\n  })\n  return results\n}\n\n/**\nSearch globally by default. If `options.regex` is not set then ensure any special regex characters in `options.find` are escaped. Do nothing if `options.find` is not set.\n*/\nfunction regExBuilder (options) {\n  if (options.find) {\n    var re = options.regex ? options.find : s.escapeRegExp(options.find)\n    var reOptions = 'g' + (options.insensitive ? 'i' : '')\n    return new RegExp(re, reOptions)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-renamer/node_modules/renamer/lib/Result.js":"module.exports = Result\n\nfunction Result (options) {\n  if (options.before) this.before = options.before\n  if (options.after) this.after = options.after\n  if (options.renamed) this.renamed = options.renamed\n  if (options.error) this.error = options.error\n  if (options.stat) this.stat = options.stat\n}\n","/home/travis/build/npmtest/node-npmtest-renamer/node_modules/renamer/lib/Results.js":"var arrayify = require('array-back')\nvar testValue = require('test-value')\n\nmodule.exports = Results\n\nfunction Results (list) {\n  this.list = list || []\n  this.add = function (files) {\n    var self = this\n    arrayify(files).forEach(function (file) {\n      if (!testValue(self.list, { before: file })) {\n        self.list.push({ before: file })\n      }\n    })\n  }\n  this.beforeList = function () {\n    return this.list.map(function (item) {\n      return item.before\n    })\n  }\n  this.afterList = function () {\n    return pluck(this.list, 'after', 'before')\n  }\n}\n\nfunction pluck (arrayOfObjects, property, property2, property3) {\n  if (!Array.isArray(arrayOfObjects)) throw new Error('.pluck() input must be an array')\n\n  return arrayOfObjects\n    .filter(function (obj) {\n      var one = eval('obj.' + property)\n      var two = eval('obj.' + property2)\n      var three = eval('obj.' + property3)\n      return one || two || three\n    })\n    .map(function (obj) {\n      var one = eval('obj.' + property)\n      var two = eval('obj.' + property2)\n      var three = eval('obj.' + property3)\n      return one || two || three\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-renamer/node_modules/renamer/bin/cli.js":"#!/usr/bin/env node\n'use strict'\nvar tool = require('command-line-tool')\nvar cliOptions = require('../lib/cliOptions')\nvar dope = require('console-dope')\nvar renamer = require('../lib/renamer')\nvar s = require('string-tools')\n\nvar usageSections = [\n  {\n    header: 'renamer',\n    content: 'Batch rename files and folders.'\n  },\n  {\n    header: 'Synopsis',\n    content: '$ renamer <options> <files>'\n  },\n  {\n    header: 'Options',\n    optionList: cliOptions,\n    hide: 'files'\n  },\n  {\n    content: 'for more detailed instructions, visit [underline]{https://github.com/75lb/renamer}'\n  }\n]\n\ntry {\n  var cli = tool.getCli(cliOptions, usageSections)\n} catch (err) {\n  tool.halt(err)\n}\n\nvar options = cli.options\n\nif (options.files.length) {\n  var fileStats = renamer.expand(options.files)\n  options.files = fileStats.filesAndDirs\n\n  fileStats.notExisting.forEach(function (file) {\n    log(options.verbose, { before: file, error: 'does not exist' })\n  })\n\n  var results = renamer.replace(options)\n  results = renamer.replaceIndexToken(results)\n  if (results.list.length) {\n    if (options['dry-run']) {\n      dope.bold.underline.log('Dry run')\n      renamer.dryRun(results).list.forEach(log.bind(null, options.verbose))\n    } else {\n      renamer.rename(results).list.forEach(log.bind(null, options.verbose))\n    }\n  }\n} else {\n  dope.red.error('No input files supplied')\n  dope.log(cli.usage)\n}\n\nfunction log (verbose, result) {\n  if (!verbose && !result.renamed) return\n  dope.log(\n    '%%%s{%s} %s %s',\n    result.renamed ? 'green' : 'red',\n    result.renamed ? s.symbol.tick : s.symbol.cross,\n    result.before + (result.after ? ' -> ' + result.after : ''),\n    result.error ? '(%red{' + result.error + '})' : ''\n  )\n}\n","/home/travis/build/npmtest/node-npmtest-renamer/node_modules/renamer/lib/cliOptions.js":"module.exports = [\n  {\n    name: 'files',\n    type: String,\n    multiple: true,\n    defaultOption: true,\n    defaultValue: [],\n    description: 'The files to rename. This is the default option.'\n  },\n  {\n    name: 'find',\n    alias: 'f',\n    type: String,\n    description: 'The find string, or regular expression when --regex is set. If not set, the whole filename will be replaced.'\n  },\n  {\n    name: 'replace',\n    alias: 'r',\n    type: String,\n    defaultValue: '',\n    description: \"The replace string. With --regex set, --replace can reference parenthesised substrings from --find with $1, $2, $3 etc. If omitted, defaults to a blank string. The special token '{{index}}' will insert an incrementing number per file processed.\"\n  },\n  {\n    name: 'regex',\n    type: Boolean,\n    alias: 'e',\n    description: 'When set, --find is intepreted as a regular expression.'\n  },\n  {\n    name: 'dry-run',\n    type: Boolean,\n    alias: 'd',\n    description: 'Used for test runs. Set this to do everything but rename the file.'\n  },\n  {\n    name: 'insensitive',\n    type: Boolean,\n    alias: 'i',\n    description: 'Enable case-insensitive finds.'\n  },\n  {\n    name: 'verbose',\n    type: Boolean,\n    alias: 'v',\n    description: 'Use to print additional information.'\n  },\n  {\n    name: 'help',\n    type: Boolean,\n    alias: 'h',\n    description: 'Print usage instructions.'\n  }\n]\n"}